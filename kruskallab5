#include <stdio.h>
#include <limits.h>

#define MAX_VERTICES 10

int cost[MAX_VERTICES][MAX_VERTICES], n, t[MAX_VERTICES][2], sum;

int find(int parent[MAX_VERTICES], int i);
void union_sets(int parent[MAX_VERTICES], int rank[MAX_VERTICES], int u, int v);

int main() {
    int i, j, k = 0, parent[MAX_VERTICES], rank[MAX_VERTICES], edges[MAX_VERTICES * MAX_VERTICES][3];

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the cost adjacency matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0 && i != j) cost[i][j] = INT_MAX;
        }

    int edge_count = 0;
    for (i = 0; i < n; i++)
        for (j = i + 1; j < n; j++) {
            if (cost[i][j] != INT_MAX) {
                edges[edge_count][0] = cost[i][j];
                edges[edge_count][1] = i;
                edges[edge_count][2] = j;
                edge_count++;
            }
        }


    for (i = 0; i < edge_count - 1; i++)
        for (j = i + 1; j < edge_count; j++)
            if (edges[i][0] > edges[j][0]) {
                int temp = edges[i][0]; edges[i][0] = edges[j][0]; edges[j][0] = temp;
                temp = edges[i][1]; edges[i][1] = edges[j][1]; edges[j][1] = temp;
                temp = edges[i][2]; edges[i][2] = edges[j][2]; edges[j][2] = temp;
            }


    for (i = 0; i < n; i++) {
        parent[i] = i;
        rank[i] = 0;
    }


    sum = 0;
    for (i = 0; i < edge_count; i++) {
        int u = edges[i][1], v = edges[i][2];
        if (find(parent, u) != find(parent, v)) {
            union_sets(parent, rank, u, v);
            t[k][0] = u; t[k][1] = v;
            sum += edges[i][0];
            k++;
            if (k == n - 1) break;
        }
    }

    printf("Edges of the minimal spanning tree:\n");
    for (i = 0; i < k; i++) printf("(%d, %d) ", t[i][0], t[i][1]);
    printf("\nSum of minimal spanning tree: %d\n", sum);

    return 0;
}

int find(int parent[MAX_VERTICES], int i) {
    if (parent[i] != i) parent[i] = find(parent, parent[i]);
    return parent[i];
}

void union_sets(int parent[MAX_VERTICES], int rank[MAX_VERTICES], int u, int v) {
    int root_u = find(parent, u), root_v = find(parent, v);
    if (root_u != root_v) {
        if (rank[root_u] > rank[root_v]) parent[root_v] = root_u;
        else if (rank[root_u] < rank[root_v]) parent[root_u] = root_v;
        else { parent[root_v] = root_u; rank[root_u]++; }
    }
}
